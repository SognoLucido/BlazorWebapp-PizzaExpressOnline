@page "/" 



@rendermode InteractiveServer
@inject ICrudController crudlike
@inject IMemoryCache MemoryCache
@inject Orderlist OrderListok
@inject NavigationManager nav

<PageTitle>Home</PageTitle>



<div class="offcanvas offcanvas-end flex-column-reverse show visible" tabindex="-1" data-bs-scroll="true" data-bs-backdrop="false" data-bs-keyboard="false" id="offcanvas-list" style="margin-top: 0px;padding-top: 74px;z-index:900;" aria-modal="true" role="dialog">
    <div class="offcanvas-header bg-danger border rounded-0 border-1 border-dark justify-content-center">
        <div class="vstack gap-1 d-flex align-items-center">
            <div class="container">
                <div class="row">
                    <div class="col-md-6 col-xl-6 text-end d-xl-flex justify-content-xl-end"><strong class="font-monospace fs-3 text-end">TOTAL :</strong></div>
                    <div class="col-md-6 d-xl-flex"><strong class="font-monospace fs-3">@OrderListok.Totalprice$</strong>&nbsp;</div>
                </div>
            </div><button class="btn btn-warning border-2 border-dark shadow" type="button" style="width: 218.8px;" @onclick="MovetoPayment"><strong>Buy</strong>&nbsp;<strong>Now</strong></button>
        </div>
    </div>
    <div class="offcanvas-body text-start p-0">
        <div>
            <ol class="list-group list-group-flush border-bottom scrollarea">
                
               @if(OrderListok.keyValuePairs.Count > 0)
               {
                    @foreach (var list in OrderListok.keyValuePairs)
                    {
                        <li class="list-group-item text-nowrap py-3 lh-tight">
                            <div class="container">
                                <div class="row align-items-baseline">
                                    <div class="col-md-8 col-lg-8"><button class="btn btn-primary btn-sm bg-danger border rounded" type="button" style="margin-right: 20px;" @onclick="@(() => OrderListok.RemoveoneItem(list.Key))"><strong>X</strong></button><strong class="mb-1"> x @list.Value.Item1 @list.Value.Item2</strong></div>
                                    <div class="col">
                                        <strong class="mb-1">@list.Value.Item3$</strong >
                                    </div >
                                </div>
                            </div>
                        </li>
                    }
                }
            </ol>
        </div>
    </div>
</div>




<main id="mainHomepage" style="padding-top:100px">

    <div class="container">
         <h2 class="text-center border rounded border-2 border-black">Pizzas</h2>
    </div>
    <section class="pizza-cards"> 
        @if(Pizzas is not null)
        {
         @foreach(var special in Pizzas)
         {
                <div style="background-image: url('@special.ImageUrl')" @onclick="@(() => OrderListok.AddtoorderList(special))">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @* @special.Description *@
                    <span class="price">@StaticMethodsGeneric.Priceaddsimbol(special.ItemPrice)</span>
                </div>

            </div>

         }
       
        }
    </section>
   <br />

    <div class="container">
        <h2 class="text-center border rounded border-2 border-black">Altro</h2>
    </div>
   <section class="pizza-cards"> 
    @if (Altro is not null)
    {
        @foreach (var special in Altro)
        {
                <div style="background-image: url('@special.ImageUrl')" @onclick="@(() => OrderListok.AddtoorderList(special))">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @* @special.Description *@
                    <span class="price">@StaticMethodsGeneric.Priceaddsimbol(special.ItemPrice)</span>
                </div>

            </div>

        }
    }
</section>
    <br />

    <div class="container">
        <h2 class="text-center border rounded border-2 border-black">Drinks</h2>
    </div>
    <section class="pizza-cards pb-4" > 
    @if (Drinks is not null)
    {
        @foreach (var special in Drinks)
        {
                <div style="background-image: url('@special.ImageUrl')" @onclick="@(() => OrderListok.AddtoorderList(special))">
                <div class="pizza-info">
                    <span class="title">@special.Name</span>
                    @* @special.Description *@
                    <span class="price">@StaticMethodsGeneric.Priceaddsimbol(special.ItemPrice)</span>
                </div>

            </div>
        }
    }
    </section>



   @*  navbar mobile *@
    <nav id="check-mob" class="navbar fixed-bottom bg-warning py-3"  style="border-top-style: solid;">
        <div class="container" >
            @if (OrderListok.keyValuePairs.Count > 0)
           {
                <div class="navbar-collapse collapse " id="navcol-2">
                  
                    <div class="vstack">
                    
                                    <div class="container bg-body border rounded" >


                                       @*  <button class="btn btn-primary" type="button">Button</button> *@


                            <ol class="list-group list-group-flush overflow-scroll border-bottom " style="min-height: 50px;max-height: 300px;">

                       
                                                @foreach (var list in OrderListok.keyValuePairs)
                                                {
                                                    <li class="list-group-item py-3 lh-tight">
                                                        <div class="container">
                                                            <div class="row align-items-baseline">
                                                                <div class="col-8 col-md-8 col-lg-8"><button class="btn btn-primary btn-sm bg-danger border rounded" type="button" style="margin-right: 20px;" @onclick="@(() => OrderListok.RemoveoneItem(list.Key))"><strong>X</strong></button><strong class="mb-1"> x @list.Value.Item1 @list.Value.Item2</strong></div>
                                                                <div class="col">
                                                                    <strong class="mb-1">@list.Value.Item3$</strong>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </li>
                                                }
                        
                                        </ol>
                    

                                    </div>

                        <hr class="mb-0">
                        <div class="container mt-1">
                            <h2 class="text-center"><strong>Total : @OrderListok.Totalprice$ </strong>&nbsp</h2>
                        </div>
                        <hr class="mt-0">


                    </div>



                             @* <ul class="navbar-nav me-auto"></ul> *@


               
                 </div>
            }
          

            <div class="container">
                <div class="row mt-2">
                    <div class="col-9 d-flex justify-content-center">
                       
                        <button class="btn btn-primary border-2 border-dark shadow" type="button" style="width: 174.5px;" @onclick="MovetoPayment"><strong>Buy now</strong></button>

                     </div>
                    <div class="col-3 d-flex justify-content-center">

          @*               <button data-bs-target="#navcol-2" data-bs-toggle="collapse" class="navbar-toggler collapsed bg-primary border-dark border-2 " aria-expanded="false"> *@

                            <Button Type="ButtonType.Button" data-bs-target="#navcol-2" data-bs-toggle="collapse" class="navbar-toggler collapsed bg-primary border-dark border-2 " aria-expanded="false" Color="ButtonColor.Primary" Position="Position.Relative">
                            
                            @if (OrderListok.keyValuePairs.Count > 0)
                            {
                                <Badge Color="BadgeColor.Danger"
                                       Position="Position.Absolute"
                                       Placement="BadgePlacement.TopRight"
                                       IndicatorType="BadgeIndicatorType.RoundedPill"
                                       VisuallyHiddenText="unread messages">@OrderListok.Counttotalitems()</Badge>
                            }


                            <span class="d-flex">
                                <svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" fill="currentColor" viewBox="0 0 16 16" class="bi bi-cart4 text-light">
                                    <path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5M3.14 5l.5 2H5V5zM6 5v2h2V5zm3 0v2h2V5zm3 0v2h1.36l.5-2zm1.11 3H12v2h.61zM11 8H9v2h2zM8 8H6v2h2zM5 8H3.89l.5 2H5zm0 5a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0m9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2m-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0"></path>
                                </svg>
                            </span><span class="visually-hidden">Toggle navigation</span>
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    </nav>
        





</main>
@code{
   

    List<ItemGetFromDbModel> Pizzas = new();
    List<ItemGetFromDbModel> Altro = new();
    List<ItemGetFromDbModel> Drinks = new();



    protected override async Task OnInitializedAsync()
    {


        // pep = await crudlike.GetItems("pizza");



        if (!MemoryCache.TryGetValue("PizzaItems", out List<ItemGetFromDbModel> cachedPizzaItems))
        {
            cachedPizzaItems = await crudlike.GetItemsBytype("pizza");
            MemoryCache.Set("PizzaItems", cachedPizzaItems, TimeSpan.FromMinutes(10)); 
        }

        if (!MemoryCache.TryGetValue("AltroItems", out List<ItemGetFromDbModel> cachedAltroItems))
        {
            cachedAltroItems = await crudlike.GetItemsBytype("altro");
            MemoryCache.Set("AltroItems", cachedAltroItems, TimeSpan.FromMinutes(10));
        }

        if (!MemoryCache.TryGetValue("DrinksItems", out List<ItemGetFromDbModel> cachedDrinksItems))
        {
            cachedDrinksItems = await crudlike.GetItemsBytype("drinks");
            MemoryCache.Set("DrinksItems", cachedDrinksItems, TimeSpan.FromMinutes(10));
        }

        Pizzas = cachedPizzaItems;
        Altro = cachedAltroItems;
        Drinks = cachedDrinksItems;

    }



    public async Task MovetoPayment()
    {
        if (OrderListok.keyValuePairs.Count > 0)
        {
            nav.NavigateTo("/payment");
        }
    }


   

}